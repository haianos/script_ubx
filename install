#!/bin/bash

####
## Start Install Script
################################################################

##
# Functions
###
set_colors()
{
  red='[0;31m';    lred='[1;31m'
  green='[0;32m';  lgreen='[1;32m'
  yellow='[0;33m'; lyellow='[1;33m'
  blue='[0;34m';   lblue='[1;34m'
  purple='[0;35m'; lpurple='[1;35m'
  cyan='[0;36m';   lcyan='[1;36m'
  grey='[0;37m';   lgrey='[1;37m'
  white='[0;38m';  lwhite='[1;38m'
  std='[m'
}

instructions()
{
  echo "*** Instructions to Install Microblx ***"
  echo "- Solve the following system dependencies: ${cyan}clang, gcc, libluajit-5.1-dev luajit${std}"
  echo "- Download the code: ${cyan}git clone https://github.com/UbxTeam/microblx${std}"
  echo "- Setup ${cyan}UBX_ROOT${std} Environmental variable"
  echo "- Further informations on ${green}http://ubxteam.github.io/quickstart/${std}"
  exit 0
}

set_ubx_root()
{
  echo "${red}UBX_ROOT Environment Variable not found${std}"
  while true; do
    read -p "ubx-core not found. Do you get the sources already?${std} [Y/N]?" answer
    case $answer in
        [Yy]* ) echo "Insert path to microblx source code ${yellow}(set UBX_ROOT)${std}"; 
                read ubxpath; 
                export UBX_ROOT=$ubxpath; 
                break;;
        [Nn]* )  echo "Please, read the follow instructions and execute this script again";
                 echo "-------------------------------------------------------------------";
                 instructions
                 break;;
        * ) echo "${yellow}$answer is not valid. Please answer yes (y) or no.${std}";;
    esac
  done
}

set_ubx_install()
{
  echo "${red}UBX_INSTALL Environment Variable not found${std}"
  read -p "Where do you want to install Ubx software?${std} (path)?" answer
  read ubxpath; 
  export UBX_INSTALL=$ubxpath; 
  break;
}

################################################################
### Program starts here 

set_colors

echo "${cyan}*** Welcome to Microblx framework! ***${std}"
echo "*** Installation Script ***"

if [ -z "$UBX_ROOT" ]; then
    set_ubx_root
fi

echo "${yellow}UBX_ROOT${std}: $UBX_ROOT"

if [ -z "$UBX_INSTALL" ]; then
    set_ubx_install
fi

export UBX_MODULES=$UBX_ROOT/lib/ubx
export UBX_MODELS=$UBX_ROOT/share/ubx/models
export UBX_METAMODELS=$UBX_ROOT/share/ubx/metamodels

echo ".... Compiling Ubx..."

CURR=`pwd`
cd $UBX_ROOT
source env.sh
make

echo "${cyan}... Installing Ubx Core Library${std}"
echo "${cyan}... - lib"
if [ ! -d "$UBX_INSTALL/lib/ubx" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx
fi
if [ ! -d "$UBX_INSTALL/include/ubx/core" ]; then
  mkdir -p $UBX_INSTALL/include/ubx/core
fi
cp $UBX_ROOT/src/libubx.so $UBX_INSTALL/lib/ubx/

cp $UBX_ROOT/src/uthash_ffi.h $UBX_INSTALL/include/ubx/core
cp $UBX_ROOT/src/ubx_types.h $UBX_INSTALL/include/ubx/core
cp $UBX_ROOT/src/ubx_proto.h $UBX_INSTALL/include/ubx/core

echo "${cyan}... - luajit layer${std}"
if [ ! -d "$UBX_INSTALL/share/ubx/scripts" ]; then
  mkdir -p $UBX_INSTALL/share/ubx/scripts
fi
cp $UBX_ROOT/lua/*.lua $UBX_INSTALL/share/ubx/scripts

if [ ! -d "$UBX_INSTALL/bin" ]; then
  mkdir -p $UBX_INSTALL/bin
fi

echo "target to install, re-compiling"
make install 

echo "${cyan}... Installing std_types${std}"
if [ ! -d "$UBX_INSTALL/lib/ubx/std_types/stdtypes" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_types/stdtypes
fi
cp $UBX_ROOT/std_types/stdtypes/stdtypes.so $UBX_INSTALL/lib/ubx/std_types/stdtypes

echo "${cyan}... Installing std_blocks${std}"
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks
fi

# ptrig
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/ptrig" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/ptrig
fi
cp $UBX_ROOT/std_blocks/ptrig/ptrig.so $UBX_INSTALL/lib/ubx/std_blocks/ptrig

# lfds_cyclic
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/lfds_buffers" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/lfds_buffers
fi
cp $UBX_ROOT/std_blocks/lfds_buffers/lfds_cyclic.so $UBX_INSTALL/lib/ubx/std_blocks/lfds_buffers
cp $UBX_ROOT/std_blocks/lfds_buffers/lfds_cyclic_raw.so $UBX_INSTALL/lib/ubx/std_blocks/lfds_buffers

# simple_fifo
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/simple_fifo" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/simple_fifo
fi
cp $UBX_ROOT/std_blocks/simple_fifo/simple_fifo.so $UBX_INSTALL/lib/ubx/std_blocks/simple_fifo

# mqueue
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/mqueue" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/mqueue
fi
cp $UBX_ROOT/std_blocks/mqueue/mqueue.so $UBX_INSTALL/lib/ubx/std_blocks/mqueue
cp $UBX_ROOT/std_blocks/mqueue/mqueue_raw.so $UBX_INSTALL/lib/ubx/std_blocks/mqueue

# hexdump
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/hexdump" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/hexdump
fi
cp $UBX_ROOT/std_blocks/hexdump/hexdump.so $UBX_INSTALL/lib/ubx/std_blocks/hexdump

# logging
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/logging" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/logging
fi
cp $UBX_ROOT/std_blocks/logging/file_logger.so $UBX_INSTALL/lib/ubx/std_blocks/logging

# random
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/random" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/random
fi
cp $UBX_ROOT/std_blocks/random/random.so $UBX_INSTALL/lib/ubx/std_blocks/random

# luablock
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/luablock" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/luablock
fi
cp $UBX_ROOT/std_blocks/luablock/luablock.so $UBX_INSTALL/lib/ubx/std_blocks/luablock

# webif
if [ ! -d "$UBX_INSTALL/lib/ubx/std_blocks/webif" ]; then
  mkdir -p $UBX_INSTALL/lib/ubx/std_blocks/webif
fi
cp $UBX_ROOT/std_blocks/webif/webif.so $UBX_INSTALL/lib/ubx/std_blocks/webif
cp $UBX_ROOT/std_blocks/webif/webif.lua $UBX_INSTALL/share/ubx/scripts


echo "${cyan}... Installing core-tools${std}"

cp $UBX_ROOT/tools/file2carr.lua $UBX_INSTALL/share/ubx/scripts
cp $UBX_ROOT/tools/luaffi_load_file.lua $UBX_INSTALL/share/ubx/scripts
cp $UBX_ROOT/tools/ubx_launch.lua $UBX_INSTALL/share/ubx/scripts
cp $UBX_ROOT/tools/ubx_launch $UBX_INSTALL/share/ubx/scripts
ln -s $UBX_INSTALL/share/ubx/scripts/ubx_launch $UBX_INSTALL/bin/ubx_launch

echo "${cyan}... Generate Environment Setup${std}"

cd $CURR
echo "export UBX_ROOT=$UBX_ROOT" > env.sh
echo "export UBX_INSTALL=$UBX_INSTALL" >> env.sh
echo 'export UBX_MODULES=$UBX_INSTALL/lib/ubx' >> env.sh
echo 'export UBX_MODELS=$UBX_INSTALL/share/ubx/models' >> env.sh
echo 'export UBX_METAMODELS=$UBX_INSTALL/share/ubx/metamodels' >> env.sh
echo 'export LUA_PATH=";;;'$LUA_PATH';'$UBX_INSTALL'/share/ubx/scripts/?.lua"' >> env.sh
echo 'export PATH=$PATH:$UBX_INSTALL/bin' >> env.sh

echo 'Source file "env.sh" '

